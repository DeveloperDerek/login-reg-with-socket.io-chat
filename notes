Authentication
    • authentication: verifying identity (401 Unauthorized)
    • authorization: verifying permission (403 Forbidden)
Username/Password Scheme
    1). Stateful (i.e. session using a cookie)
    2). Stateless (i.e. token using JWT/OAuth/other)

Sessions
    Flow
        1). user submit ogion credential, e.g. email & password
        2). server verifies the credentials against the DB
        3). server creates a temporary user session
        4). server issues a cookie with a session ID
        5). user sends the cookie with each request
        6). server validates it against the session store & grants access
        7). when user logs out, server destroys the sess. & clears the cookie
    Features
        • every usser session is stored server-side (stateful)
            - memory (e.g. file system)
            - cache (e.g. Redis or Memcached)
            - DB (e.g. Postgres or MongoDB)
        • each user is identified by a session ID
            - opaque ref.
                - no 3rd party can extract data out
                - only issuer (server) can map back to data
            - stored in a cookie
                - signed with a secret
                - protected with flags
        • SSR web apps, frameworks(Spring, Rails), scripting langs(PHP)
    Cookies
        • cookie header, just like Authorization or Content-Type
        • used in session managment, personalization, tracking
        • consists of name, value, and (optional) attributes/flags
        • set with Set-Cookie by server, appended with Cookie by browser
        Security
            • signed (HMAC) with a secret to mitigate tampering
            • rarely encrypted (AES) to protected from being read
                - no security concern if read by 3rd party
                - carries no meaningful data (random string)
                - even if encrypted, still a 1-1 match
            • encoded (URL) - not for security, but compaability
        Attributes
            • Domain and Path (can only be used on a given site & route)
            • Expiration (can only be used until expiry)
                - when omitted, becomes a session cookie
                - gets deleted when browser is closed
        Flags 
            • HttpOnly (cannot be read with JS on the client-side)
            • Secure (can only sent over encrypted HTTPS channel), and
            • SameSite (can only bne sent from the same domain, i.e. no CORS sharing)
        CSRF
            • unauthorized actions on behalf of the authenticated user
            • mitigated with a CSRF token (e.g. sent in a separate X-CSRF-TOKEN cookie)

Tokens
    Flow
        1). user submits login credentials, e.g. email & password
        2). server verifies the credentials against the DB
        3). sever generates a temporary token and embeds user data into it
        4). server responds back with the token (in body or header)
        5). user stores the token in client storage
        6). user sends the token along with each request
        7). server verifies the token & grant access
        8). when user logs out, token is cleared from client storage
    Features
        • tokens are not stored server-side, only on the client (stateless)
        • signed with a secret against tampering
            - verified and can be trusted by the server
        • tokens can be opaque or self-contained
            - carries all required user data in its payload
            - reduced database lookups, bu exposes data to XSS
        • typically sent in Authorization header
        • when a token is about to expire, it can be refreshed
            - client is issued both access & refresh tokens
        • used in SPA web apps, web APIs, mobile apps
    JWT (JSON Web Tokens)
        • open standard for authorization & info exchange
        • compact, self-cnotained, URL-safe tokens
        • signed with symmetric (secret) or asymmetric (public/private) key
        • contains header (meta), payload (claims), and signature delimted with .
        Security
            • signed (HMAC) with a secret
                - guarantees that token was not tampered
                - any manipulation (e.g. exp. time) invalidated token
            • rarey encrypted (JWE)
                - (web) clients need to read token payload
                - can't store the secret in client storage securely
            • encoded (Base64Url) - not for security, but for transport
                - payload can be decoded and read
                - no sensitive/private info should be stored
                - access tokens should be short-lived
        XSS
            • client-side script injections
            • malicious code can access client storage to
                - steal user data from the token
                - initiate AJAX reques on behalf of user
            • mitigated by sanitizing & escaping user input
        Client storage
            • JWT can be stored in client storage, localStorage or sessionStorage
                - localStorage has no expiration time
                - sessionStorage gets cleared when page is closed
        localStorage
            • Browser key-value store with a simple JS API
            Pros 
                • domain-specific each site has its own, other sites can't read/write
                • max size higher than cookie (5MB/domain vs. 4KB/cookie)
            Cons 
                • plaintext, hence not secure by design
                • limited to string data henceneed to serialize
                • can't be used by web workers
                • stored permanently, unless removed explicitly
                • accessible to any JS code running on the page(incl. XSS)
                    - scripts can steal tokens or impersonate users
            Best for
                • public, non-sensitive, string data
            Worst for
                • private sensitive data
                • non-string data
                • offline capabilities

Sessions + Cookies
    Pros
    • session IDs are opaque and carry no meaningful data
    • cookies can be secured with flags (same origin, HTTP-only, HTTPs, etc.)
    • HTTP-only cookies can't be compromised with XSS exploits
    • battle-tested 20+ years in many langs & frameworks
    Cons
    • server must store each user session in memory
    • session auth must be secured against CSRF
    • horizontal scaling is more challenging
        - risk of single point for failure
        - need sticky sessions with load balancing
JWT Auth
    Pros
    • server does not need to keep track of user sessions
    • horizontal scaling is easier (any server can verify the token)
    • CORS is not an issu if Authorization header is used instead of Cookie
    • FE and BE architecture is decoupled, can be used with mobile apps
    • operational even if cookies are disabled
    Cons
    • server still has to maintain a blacklist of revoked tokens
        - defeats the purpoose of stateless tokens
        - a whitelist of active user sessions is more secure
    • when scaling, the secret must be shared between servers
    • data stored in token is "cached" amd cam gp stale (out of sync)
    • tokens stored in client storage are vulnerable to XSS
        - if JWT token is compromised, attackercan 
            - steal user info, permissions, metadata, etc.
            - access website resources on user's behalf
    • requires JavaScript to be enabled
Options for Auth in SPAs/APIs
    1). Sessions
    2). Stateless JWT
    3). Stateful JWT
    Stateless JWT
        • user payload embedded in the token
        • token is signed & base64url encoded
            - sent via AUthorization header
            - stored in localStorage/sessionStorage (in plaintext)
        • server retrieves user info from the token 
        • no user sessions are stored server side
        • only revoked tokens are persisted
        • refresh token sent to renew access token
    Stateful JWT
        • only user ref (e.g. ID)  embedded in the token
        • token is signed & base64url encoded
            - sent as an HTTP-only cookie (Set-Cookie header)
            - sent along with non-HTTP X-CSRF-TOKEN cookie
        • server uses ref. (ID) in the token to retrieve user from the DB
        • no user sessions stored on the server either
        • revoked tokens still have to be persisted
    Sessions
        • sessions are persisted server-side and linked by sess. ID
        • sessionID is singed and stored in a cookie
            - sent via Set-Cookie header
            - HttpONly, Secure & SameSite flags
            - scoped to the origin with Domain & Path attributes
        • another cookie can hold CSRF token
    Verdict: Sessions are (probably) better suited for web apps and websites
    Why not JWT???
        • server state needs to be maintained either way
        • sessions are easily extended or invalidated
        • data is secured server side & doesn't leak through XSS
        • CSRF is easier to mitigate than XSS (still a concern)
        • data never goes stale (alawys in sync with DB)
        • sessions are generally easier to set up & manage 
        • most apps/sites don't require enterprise scaling
